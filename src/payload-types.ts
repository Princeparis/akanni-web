/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    categories: Category;
    tags: Tag;
    journals: Journal;
    portfolios: Portfolio;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    journals: JournalsSelect<false> | JournalsSelect<true>;
    portfolios: PortfoliosSelect<false> | PortfoliosSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  /**
   * Category name (must be unique)
   */
  name: string;
  /**
   * URL-friendly version of the name
   */
  slug: string;
  /**
   * Brief description of the category (optional)
   */
  description?: string | null;
  /**
   * Hex color code for category styling (e.g., #FF5733)
   */
  color?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  /**
   * Tag name (must be unique)
   */
  name: string;
  /**
   * URL-friendly version of the name (auto-generated)
   */
  slug: string;
  /**
   * Number of journals using this tag (auto-calculated)
   */
  journalCount?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "journals".
 */
export interface Journal {
  id: number;
  /**
   * Journal entry title (required, max 100 characters)
   */
  title: string;
  /**
   * URL-friendly version of the title (auto-generated)
   */
  slug: string;
  /**
   * Optional paragraph 1 (plain text, up to 1000 chars)
   */
  paragraph1?: string | null;
  /**
   * Optional paragraph 2 (plain text, up to 1000 chars)
   */
  paragraph2?: string | null;
  /**
   * Optional paragraph 3 (plain text, up to 1000 chars)
   */
  paragraph3?: string | null;
  /**
   * Optional paragraph 4 (plain text, up to 1000 chars)
   */
  paragraph4?: string | null;
  /**
   * Optional paragraph 5 (plain text, up to 1000 chars)
   */
  paragraph5?: string | null;
  /**
   * Optional subheader 1 (up to 1000 chars)
   */
  subheader1?: string | null;
  /**
   * Optional subheader 2 (up to 1000 chars)
   */
  subheader2?: string | null;
  /**
   * Optional subheader 3 (up to 1000 chars)
   */
  subheader3?: string | null;
  /**
   * Optional quote 1 (up to 1000 chars)
   */
  quote1?: string | null;
  /**
   * Optional quote 2 (up to 1000 chars)
   */
  quote2?: string | null;
  /**
   * Optional image 1
   */
  image1?: (number | null) | Media;
  /**
   * Optional image 2
   */
  image2?: (number | null) | Media;
  /**
   * Optional image 3
   */
  image3?: (number | null) | Media;
  /**
   * Optional image 4
   */
  image4?: (number | null) | Media;
  /**
   * Optional image 5
   */
  image5?: (number | null) | Media;
  /**
   * Brief description for previews and SEO (max 300 characters)
   */
  excerpt?: string | null;
  /**
   * Cover image for the journal entry
   */
  coverImage?: (number | null) | Media;
  /**
   * URL to audio file (mp3, wav, ogg, m4a, aac, flac)
   */
  audioUrl?: string | null;
  /**
   * Publication status of the journal entry
   */
  status: 'draft' | 'published';
  /**
   * Date when the entry was published (auto-set when publishing)
   */
  publishedAt?: string | null;
  /**
   * Primary category for this journal entry
   */
  category?: (number | null) | Category;
  /**
   * Tags associated with this journal entry
   */
  tags?: (number | Tag)[] | null;
  /**
   * Search engine optimization settings
   */
  seo?: {
    /**
     * SEO title (max 60 characters, defaults to journal title)
     */
    title?: string | null;
    /**
     * SEO meta description (max 160 characters, defaults to excerpt)
     */
    description?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "portfolios".
 */
export interface Portfolio {
  id: number;
  /**
   * Project title (required)
   */
  title: string;
  /**
   * URL slug (auto-generated from title)
   */
  slug: string;
  /**
   * Year the project was completed or launched
   */
  year?: number | null;
  /**
   * Project categories (choose one or more)
   */
  categories: ('branding' | 'ui-ux' | 'web-design' | 'web-development' | 'app-development' | 'backend-development')[];
  /**
   * Main cover image for the project
   */
  coverImage?: (number | null) | Media;
  /**
   * Introductory text for the project (optional, max 1000 chars)
   */
  intro?: string | null;
  image1?: (number | null) | Media;
  image2?: (number | null) | Media;
  image3?: (number | null) | Media;
  image4?: (number | null) | Media;
  /**
   * Implementation details for the project (optional, max 1000 chars)
   */
  implementation?: string | null;
  image5?: (number | null) | Media;
  image6?: (number | null) | Media;
  image7?: (number | null) | Media;
  image8?: (number | null) | Media;
  /**
   * Short summary for lists and previews
   */
  excerpt?: string | null;
  /**
   * Short description of the project for cards and meta
   */
  description?: string | null;
  status: 'draft' | 'published';
  publishedAt?: string | null;
  seo?: {
    title?: string | null;
    description?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'journals';
        value: number | Journal;
      } | null)
    | ({
        relationTo: 'portfolios';
        value: number | Portfolio;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  color?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  journalCount?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "journals_select".
 */
export interface JournalsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  paragraph1?: T;
  paragraph2?: T;
  paragraph3?: T;
  paragraph4?: T;
  paragraph5?: T;
  subheader1?: T;
  subheader2?: T;
  subheader3?: T;
  quote1?: T;
  quote2?: T;
  image1?: T;
  image2?: T;
  image3?: T;
  image4?: T;
  image5?: T;
  excerpt?: T;
  coverImage?: T;
  audioUrl?: T;
  status?: T;
  publishedAt?: T;
  category?: T;
  tags?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "portfolios_select".
 */
export interface PortfoliosSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  year?: T;
  categories?: T;
  coverImage?: T;
  intro?: T;
  image1?: T;
  image2?: T;
  image3?: T;
  image4?: T;
  implementation?: T;
  image5?: T;
  image6?: T;
  image7?: T;
  image8?: T;
  excerpt?: T;
  description?: T;
  status?: T;
  publishedAt?: T;
  seo?:
    | T
    | {
        title?: T;
        description?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}